<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: plan.proto

namespace Milvus\Proto\Plan;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>milvus.proto.plan.Expr</code>
 */
class Expr extends \Google\Protobuf\Internal\Message
{
    protected $expr;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Milvus\Proto\Plan\TermExpr $term_expr
     *     @type \Milvus\Proto\Plan\UnaryExpr $unary_expr
     *     @type \Milvus\Proto\Plan\BinaryExpr $binary_expr
     *     @type \Milvus\Proto\Plan\CompareExpr $compare_expr
     *     @type \Milvus\Proto\Plan\UnaryRangeExpr $unary_range_expr
     *     @type \Milvus\Proto\Plan\BinaryRangeExpr $binary_range_expr
     *     @type \Milvus\Proto\Plan\BinaryArithOpEvalRangeExpr $binary_arith_op_eval_range_expr
     *     @type \Milvus\Proto\Plan\BinaryArithExpr $binary_arith_expr
     *     @type \Milvus\Proto\Plan\ValueExpr $value_expr
     *     @type \Milvus\Proto\Plan\ColumnExpr $column_expr
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Plan::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.milvus.proto.plan.TermExpr term_expr = 1;</code>
     * @return \Milvus\Proto\Plan\TermExpr|null
     */
    public function getTermExpr()
    {
        return $this->readOneof(1);
    }

    public function hasTermExpr()
    {
        return $this->hasOneof(1);
    }

    /**
     * Generated from protobuf field <code>.milvus.proto.plan.TermExpr term_expr = 1;</code>
     * @param \Milvus\Proto\Plan\TermExpr $var
     * @return $this
     */
    public function setTermExpr($var)
    {
        GPBUtil::checkMessage($var, \Milvus\Proto\Plan\TermExpr::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.milvus.proto.plan.UnaryExpr unary_expr = 2;</code>
     * @return \Milvus\Proto\Plan\UnaryExpr|null
     */
    public function getUnaryExpr()
    {
        return $this->readOneof(2);
    }

    public function hasUnaryExpr()
    {
        return $this->hasOneof(2);
    }

    /**
     * Generated from protobuf field <code>.milvus.proto.plan.UnaryExpr unary_expr = 2;</code>
     * @param \Milvus\Proto\Plan\UnaryExpr $var
     * @return $this
     */
    public function setUnaryExpr($var)
    {
        GPBUtil::checkMessage($var, \Milvus\Proto\Plan\UnaryExpr::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.milvus.proto.plan.BinaryExpr binary_expr = 3;</code>
     * @return \Milvus\Proto\Plan\BinaryExpr|null
     */
    public function getBinaryExpr()
    {
        return $this->readOneof(3);
    }

    public function hasBinaryExpr()
    {
        return $this->hasOneof(3);
    }

    /**
     * Generated from protobuf field <code>.milvus.proto.plan.BinaryExpr binary_expr = 3;</code>
     * @param \Milvus\Proto\Plan\BinaryExpr $var
     * @return $this
     */
    public function setBinaryExpr($var)
    {
        GPBUtil::checkMessage($var, \Milvus\Proto\Plan\BinaryExpr::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.milvus.proto.plan.CompareExpr compare_expr = 4;</code>
     * @return \Milvus\Proto\Plan\CompareExpr|null
     */
    public function getCompareExpr()
    {
        return $this->readOneof(4);
    }

    public function hasCompareExpr()
    {
        return $this->hasOneof(4);
    }

    /**
     * Generated from protobuf field <code>.milvus.proto.plan.CompareExpr compare_expr = 4;</code>
     * @param \Milvus\Proto\Plan\CompareExpr $var
     * @return $this
     */
    public function setCompareExpr($var)
    {
        GPBUtil::checkMessage($var, \Milvus\Proto\Plan\CompareExpr::class);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.milvus.proto.plan.UnaryRangeExpr unary_range_expr = 5;</code>
     * @return \Milvus\Proto\Plan\UnaryRangeExpr|null
     */
    public function getUnaryRangeExpr()
    {
        return $this->readOneof(5);
    }

    public function hasUnaryRangeExpr()
    {
        return $this->hasOneof(5);
    }

    /**
     * Generated from protobuf field <code>.milvus.proto.plan.UnaryRangeExpr unary_range_expr = 5;</code>
     * @param \Milvus\Proto\Plan\UnaryRangeExpr $var
     * @return $this
     */
    public function setUnaryRangeExpr($var)
    {
        GPBUtil::checkMessage($var, \Milvus\Proto\Plan\UnaryRangeExpr::class);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.milvus.proto.plan.BinaryRangeExpr binary_range_expr = 6;</code>
     * @return \Milvus\Proto\Plan\BinaryRangeExpr|null
     */
    public function getBinaryRangeExpr()
    {
        return $this->readOneof(6);
    }

    public function hasBinaryRangeExpr()
    {
        return $this->hasOneof(6);
    }

    /**
     * Generated from protobuf field <code>.milvus.proto.plan.BinaryRangeExpr binary_range_expr = 6;</code>
     * @param \Milvus\Proto\Plan\BinaryRangeExpr $var
     * @return $this
     */
    public function setBinaryRangeExpr($var)
    {
        GPBUtil::checkMessage($var, \Milvus\Proto\Plan\BinaryRangeExpr::class);
        $this->writeOneof(6, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.milvus.proto.plan.BinaryArithOpEvalRangeExpr binary_arith_op_eval_range_expr = 7;</code>
     * @return \Milvus\Proto\Plan\BinaryArithOpEvalRangeExpr|null
     */
    public function getBinaryArithOpEvalRangeExpr()
    {
        return $this->readOneof(7);
    }

    public function hasBinaryArithOpEvalRangeExpr()
    {
        return $this->hasOneof(7);
    }

    /**
     * Generated from protobuf field <code>.milvus.proto.plan.BinaryArithOpEvalRangeExpr binary_arith_op_eval_range_expr = 7;</code>
     * @param \Milvus\Proto\Plan\BinaryArithOpEvalRangeExpr $var
     * @return $this
     */
    public function setBinaryArithOpEvalRangeExpr($var)
    {
        GPBUtil::checkMessage($var, \Milvus\Proto\Plan\BinaryArithOpEvalRangeExpr::class);
        $this->writeOneof(7, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.milvus.proto.plan.BinaryArithExpr binary_arith_expr = 8;</code>
     * @return \Milvus\Proto\Plan\BinaryArithExpr|null
     */
    public function getBinaryArithExpr()
    {
        return $this->readOneof(8);
    }

    public function hasBinaryArithExpr()
    {
        return $this->hasOneof(8);
    }

    /**
     * Generated from protobuf field <code>.milvus.proto.plan.BinaryArithExpr binary_arith_expr = 8;</code>
     * @param \Milvus\Proto\Plan\BinaryArithExpr $var
     * @return $this
     */
    public function setBinaryArithExpr($var)
    {
        GPBUtil::checkMessage($var, \Milvus\Proto\Plan\BinaryArithExpr::class);
        $this->writeOneof(8, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.milvus.proto.plan.ValueExpr value_expr = 9;</code>
     * @return \Milvus\Proto\Plan\ValueExpr|null
     */
    public function getValueExpr()
    {
        return $this->readOneof(9);
    }

    public function hasValueExpr()
    {
        return $this->hasOneof(9);
    }

    /**
     * Generated from protobuf field <code>.milvus.proto.plan.ValueExpr value_expr = 9;</code>
     * @param \Milvus\Proto\Plan\ValueExpr $var
     * @return $this
     */
    public function setValueExpr($var)
    {
        GPBUtil::checkMessage($var, \Milvus\Proto\Plan\ValueExpr::class);
        $this->writeOneof(9, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.milvus.proto.plan.ColumnExpr column_expr = 10;</code>
     * @return \Milvus\Proto\Plan\ColumnExpr|null
     */
    public function getColumnExpr()
    {
        return $this->readOneof(10);
    }

    public function hasColumnExpr()
    {
        return $this->hasOneof(10);
    }

    /**
     * Generated from protobuf field <code>.milvus.proto.plan.ColumnExpr column_expr = 10;</code>
     * @param \Milvus\Proto\Plan\ColumnExpr $var
     * @return $this
     */
    public function setColumnExpr($var)
    {
        GPBUtil::checkMessage($var, \Milvus\Proto\Plan\ColumnExpr::class);
        $this->writeOneof(10, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getExpr()
    {
        return $this->whichOneof("expr");
    }

}

